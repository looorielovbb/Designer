if (Boolean.valueOf(rootProject.ext.isBuildModule)) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.github.JailedBird.ARouterPlugin'

android {
    compileSdk rootProject.ext.android["compileSdkVersion"]

    defaultConfig {
        namespace 'com.jojo.design.module_mall'
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        //MultiDex分包方法
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //支持DataBinding
    viewBinding{
        enabled = true
    }
    dataBinding {
        enabled = true
    }

    //java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件
    //（ 或文件夹下的源文件 ） 要被编译 ， 哪些源文件要被排除 。
    sourceSets {
        main {
            if (Boolean.valueOf(rootProject.ext.isBuildModule)) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(":common-base")
    implementation project(":common-ui")
    implementation 'androidx.recyclerview:recyclerview:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    //BaseAdapter
    implementation 'com.github.GraceJoJo:DataBindingBaseAdapter:1.0.1'

    //MultiDex分包
    implementation rootProject.ext.dependencies["multidex"]

    //网络请求
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-adapter"]
    implementation rootProject.ext.dependencies["retrofit-log"]

    //rxjava
    implementation rootProject.ext.dependencies["rxjava"]
    implementation rootProject.ext.dependencies["rxandroid"]

     //Room
    implementation rootProject.ext.dependencies["room"]
    annotationProcessor rootProject.ext.dependencies["room-compiler"]
    implementation rootProject.ext.dependencies["room-support-rxjava"]

    //ARouter
    implementation rootProject.ext.dependencies["arouter"]
    annotationProcessor  rootProject.ext.dependencies["arouter-compiler"]

    //dagger2
    implementation rootProject.ext.dependencies["dagger"]
    annotationProcessor rootProject.ext.dependencies["dagger-compiler"]

    //事件订阅eventbus
    implementation rootProject.ext.dependencies["eventbus"]

    //图片
    implementation rootProject.ext.dependencies["glide"]

    //数据库
    implementation rootProject.ext.dependencies["room"]
    annotationProcessor rootProject.ext.dependencies["room-compiler"]

    //retrofit
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-adapter"]
    //banner
    implementation rootProject.ext.dependencies["banner"]
}
